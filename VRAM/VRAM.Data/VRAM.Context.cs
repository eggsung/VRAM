//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 템플릿에서 생성되었습니다.
//
//     이 파일을 수동으로 변경하면 응용 프로그램에서 예기치 않은 동작이 발생할 수 있습니다.
//     이 파일을 수동으로 변경하면 코드가 다시 생성될 때 변경 내용을 덮어씁니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VRAM.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VRAMEntities : DbContext
    {
        public VRAMEntities()
            : base("name=VRAMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Board> Boards { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberRole> MemberRoles { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
    
        public virtual int Attendance_Insert(string memberId, Nullable<System.DateTime> date, Nullable<System.TimeSpan> inTime, Nullable<System.TimeSpan> outTime, Nullable<int> status)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var inTimeParameter = inTime.HasValue ?
                new ObjectParameter("InTime", inTime) :
                new ObjectParameter("InTime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Attendance_Insert", memberIdParameter, dateParameter, inTimeParameter, outTimeParameter, statusParameter);
        }
    
        public virtual int Board_Insert(string memberId, Nullable<int> qNum, string qcontext, Nullable<System.DateTime> updateDate, string answer)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var qNumParameter = qNum.HasValue ?
                new ObjectParameter("QNum", qNum) :
                new ObjectParameter("QNum", typeof(int));
    
            var qcontextParameter = qcontext != null ?
                new ObjectParameter("Qcontext", qcontext) :
                new ObjectParameter("Qcontext", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Board_Insert", memberIdParameter, qNumParameter, qcontextParameter, updateDateParameter, answerParameter);
        }
    
        public virtual int Member_Insert(string memberId, string memberName, string password, string phoneNum, string email)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var phoneNumParameter = phoneNum != null ?
                new ObjectParameter("PhoneNum", phoneNum) :
                new ObjectParameter("PhoneNum", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Member_Insert", memberIdParameter, memberNameParameter, passwordParameter, phoneNumParameter, emailParameter);
        }
    }
}
